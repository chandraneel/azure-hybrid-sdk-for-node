"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines values for SkuName.
 * Possible values include: 'standard', 'premium'
 * @readonly
 * @enum {string}
 */
var SkuName;
(function (SkuName) {
    SkuName["Standard"] = "standard";
    SkuName["Premium"] = "premium";
})(SkuName = exports.SkuName || (exports.SkuName = {}));
/**
 * Defines values for KeyPermissions.
 * Possible values include: 'encrypt', 'decrypt', 'wrapKey', 'unwrapKey',
 * 'sign', 'verify', 'get', 'list', 'create', 'update', 'import', 'delete',
 * 'backup', 'restore', 'recover', 'purge'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: KeyPermissions =
 * <KeyPermissions>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var KeyPermissions;
(function (KeyPermissions) {
    KeyPermissions["Encrypt"] = "encrypt";
    KeyPermissions["Decrypt"] = "decrypt";
    KeyPermissions["WrapKey"] = "wrapKey";
    KeyPermissions["UnwrapKey"] = "unwrapKey";
    KeyPermissions["Sign"] = "sign";
    KeyPermissions["Verify"] = "verify";
    KeyPermissions["Get"] = "get";
    KeyPermissions["List"] = "list";
    KeyPermissions["Create"] = "create";
    KeyPermissions["Update"] = "update";
    KeyPermissions["Import"] = "import";
    KeyPermissions["Delete"] = "delete";
    KeyPermissions["Backup"] = "backup";
    KeyPermissions["Restore"] = "restore";
    KeyPermissions["Recover"] = "recover";
    KeyPermissions["Purge"] = "purge";
})(KeyPermissions = exports.KeyPermissions || (exports.KeyPermissions = {}));
/**
 * Defines values for SecretPermissions.
 * Possible values include: 'get', 'list', 'set', 'delete', 'backup',
 * 'restore', 'recover', 'purge'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SecretPermissions =
 * <SecretPermissions>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var SecretPermissions;
(function (SecretPermissions) {
    SecretPermissions["Get"] = "get";
    SecretPermissions["List"] = "list";
    SecretPermissions["Set"] = "set";
    SecretPermissions["Delete"] = "delete";
    SecretPermissions["Backup"] = "backup";
    SecretPermissions["Restore"] = "restore";
    SecretPermissions["Recover"] = "recover";
    SecretPermissions["Purge"] = "purge";
})(SecretPermissions = exports.SecretPermissions || (exports.SecretPermissions = {}));
/**
 * Defines values for CertificatePermissions.
 * Possible values include: 'get', 'list', 'delete', 'create', 'import',
 * 'update', 'managecontacts', 'getissuers', 'listissuers', 'setissuers',
 * 'deleteissuers', 'manageissuers', 'recover', 'purge'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CertificatePermissions =
 * <CertificatePermissions>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var CertificatePermissions;
(function (CertificatePermissions) {
    CertificatePermissions["Get"] = "get";
    CertificatePermissions["List"] = "list";
    CertificatePermissions["Delete"] = "delete";
    CertificatePermissions["Create"] = "create";
    CertificatePermissions["Import"] = "import";
    CertificatePermissions["Update"] = "update";
    CertificatePermissions["Managecontacts"] = "managecontacts";
    CertificatePermissions["Getissuers"] = "getissuers";
    CertificatePermissions["Listissuers"] = "listissuers";
    CertificatePermissions["Setissuers"] = "setissuers";
    CertificatePermissions["Deleteissuers"] = "deleteissuers";
    CertificatePermissions["Manageissuers"] = "manageissuers";
    CertificatePermissions["Recover"] = "recover";
    CertificatePermissions["Purge"] = "purge";
})(CertificatePermissions = exports.CertificatePermissions || (exports.CertificatePermissions = {}));
/**
 * Defines values for StoragePermissions.
 * Possible values include: 'get', 'list', 'delete', 'set', 'update',
 * 'regeneratekey', 'recover', 'purge', 'backup', 'restore', 'setsas',
 * 'listsas', 'getsas', 'deletesas'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: StoragePermissions =
 * <StoragePermissions>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var StoragePermissions;
(function (StoragePermissions) {
    StoragePermissions["Get"] = "get";
    StoragePermissions["List"] = "list";
    StoragePermissions["Delete"] = "delete";
    StoragePermissions["Set"] = "set";
    StoragePermissions["Update"] = "update";
    StoragePermissions["Regeneratekey"] = "regeneratekey";
    StoragePermissions["Recover"] = "recover";
    StoragePermissions["Purge"] = "purge";
    StoragePermissions["Backup"] = "backup";
    StoragePermissions["Restore"] = "restore";
    StoragePermissions["Setsas"] = "setsas";
    StoragePermissions["Listsas"] = "listsas";
    StoragePermissions["Getsas"] = "getsas";
    StoragePermissions["Deletesas"] = "deletesas";
})(StoragePermissions = exports.StoragePermissions || (exports.StoragePermissions = {}));
/**
 * Defines values for CreateMode.
 * Possible values include: 'recover', 'default'
 * @readonly
 * @enum {string}
 */
var CreateMode;
(function (CreateMode) {
    CreateMode["Recover"] = "recover";
    CreateMode["Default"] = "default";
})(CreateMode = exports.CreateMode || (exports.CreateMode = {}));
/**
 * Defines values for Reason.
 * Possible values include: 'AccountNameInvalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
var Reason;
(function (Reason) {
    Reason["AccountNameInvalid"] = "AccountNameInvalid";
    Reason["AlreadyExists"] = "AlreadyExists";
})(Reason = exports.Reason || (exports.Reason = {}));
/**
 * Defines values for AccessPolicyUpdateKind.
 * Possible values include: 'add', 'replace', 'remove'
 * @readonly
 * @enum {string}
 */
var AccessPolicyUpdateKind;
(function (AccessPolicyUpdateKind) {
    AccessPolicyUpdateKind["Add"] = "add";
    AccessPolicyUpdateKind["Replace"] = "replace";
    AccessPolicyUpdateKind["Remove"] = "remove";
})(AccessPolicyUpdateKind = exports.AccessPolicyUpdateKind || (exports.AccessPolicyUpdateKind = {}));
//# sourceMappingURL=index.js.map