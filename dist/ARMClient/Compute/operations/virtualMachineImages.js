"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = require("ms-rest-js");
var Mappers = require("../models/virtualMachineImagesMappers");
var WebResource = msRest.WebResource;
/** Class representing a VirtualMachineImages. */
var VirtualMachineImages = /** @class */ (function () {
    /**
     * Create a VirtualMachineImages.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachineImages(client) {
        this.serializer = new msRest.Serializer(Mappers);
        this.client = client;
    }
    /**
     * Gets a virtual machine image.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {string} publisherName A valid image publisher.
     *
     * @param {string} offer A valid image publisher offer.
     *
     * @param {string} skus A valid image SKU.
     *
     * @param {string} version A valid image SKU version.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineImages.prototype.getWithHttpOperationResponse = function (location, publisherName, offer, skus, version, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            location: location,
                            publisherName: publisherName,
                            offer: offer,
                            skus: skus,
                            version: version,
                            "this.client.apiVersion": this.client.apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}",
                                urlParameters: [
                                    {
                                        parameterPath: "location",
                                        mapper: {
                                            required: true,
                                            serializedName: "location",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "publisherName",
                                        mapper: {
                                            required: true,
                                            serializedName: "publisherName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "offer",
                                        mapper: {
                                            required: true,
                                            serializedName: "offer",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "skus",
                                        mapper: {
                                            required: true,
                                            serializedName: "skus",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "version",
                                        mapper: {
                                            required: true,
                                            serializedName: "version",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "this.client.apiVersion",
                                        mapper: {
                                            required: true,
                                            serializedName: "api-version",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualMachineImage
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualMachineImage;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer,
     * and SKU.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {string} publisherName A valid image publisher.
     *
     * @param {string} offer A valid image publisher offer.
     *
     * @param {string} skus A valid image SKU.
     *
     * @param {VirtualMachineImagesListOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineImages.prototype.listWithHttpOperationResponse = function (location, publisherName, offer, skus, options) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, top, orderby, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = (options && options.filter !== undefined) ? options.filter : undefined;
                        top = (options && options.top !== undefined) ? options.top : undefined;
                        orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            location: location,
                            publisherName: publisherName,
                            offer: offer,
                            skus: skus,
                            filter: filter,
                            top: top,
                            orderby: orderby,
                            "this.client.apiVersion": this.client.apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions",
                                urlParameters: [
                                    {
                                        parameterPath: "location",
                                        mapper: {
                                            required: true,
                                            serializedName: "location",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "publisherName",
                                        mapper: {
                                            required: true,
                                            serializedName: "publisherName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "offer",
                                        mapper: {
                                            required: true,
                                            serializedName: "offer",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "skus",
                                        mapper: {
                                            required: true,
                                            serializedName: "skus",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "filter",
                                        mapper: {
                                            serializedName: "$filter",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "top",
                                        mapper: {
                                            serializedName: "$top",
                                            type: {
                                                name: "Number"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "orderby",
                                        mapper: {
                                            serializedName: "$orderby",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.apiVersion",
                                        mapper: {
                                            required: true,
                                            serializedName: "api-version",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: {
                                            serializedName: "parsedResponse",
                                            type: {
                                                name: "Sequence",
                                                element: {
                                                    serializedName: "VirtualMachineImageResourceElementType",
                                                    type: {
                                                        name: "Composite",
                                                        className: "VirtualMachineImageResource"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = {
                                        serializedName: "parsedResponse",
                                        type: {
                                            name: "Sequence",
                                            element: {
                                                serializedName: "VirtualMachineImageResourceElementType",
                                                type: {
                                                    name: "Composite",
                                                    className: "VirtualMachineImageResource"
                                                }
                                            }
                                        }
                                    };
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets a list of virtual machine image offers for the specified location and publisher.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {string} publisherName A valid image publisher.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineImages.prototype.listOffersWithHttpOperationResponse = function (location, publisherName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            location: location,
                            publisherName: publisherName,
                            "this.client.apiVersion": this.client.apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers",
                                urlParameters: [
                                    {
                                        parameterPath: "location",
                                        mapper: {
                                            required: true,
                                            serializedName: "location",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "publisherName",
                                        mapper: {
                                            required: true,
                                            serializedName: "publisherName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "this.client.apiVersion",
                                        mapper: {
                                            required: true,
                                            serializedName: "api-version",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: {
                                            serializedName: "parsedResponse",
                                            type: {
                                                name: "Sequence",
                                                element: {
                                                    serializedName: "VirtualMachineImageResourceElementType",
                                                    type: {
                                                        name: "Composite",
                                                        className: "VirtualMachineImageResource"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = {
                                        serializedName: "parsedResponse",
                                        type: {
                                            name: "Sequence",
                                            element: {
                                                serializedName: "VirtualMachineImageResourceElementType",
                                                type: {
                                                    name: "Composite",
                                                    className: "VirtualMachineImageResource"
                                                }
                                            }
                                        }
                                    };
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets a list of virtual machine image publishers for the specified Azure location.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineImages.prototype.listPublishersWithHttpOperationResponse = function (location, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            location: location,
                            "this.client.apiVersion": this.client.apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers",
                                urlParameters: [
                                    {
                                        parameterPath: "location",
                                        mapper: {
                                            required: true,
                                            serializedName: "location",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "this.client.apiVersion",
                                        mapper: {
                                            required: true,
                                            serializedName: "api-version",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: {
                                            serializedName: "parsedResponse",
                                            type: {
                                                name: "Sequence",
                                                element: {
                                                    serializedName: "VirtualMachineImageResourceElementType",
                                                    type: {
                                                        name: "Composite",
                                                        className: "VirtualMachineImageResource"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = {
                                        serializedName: "parsedResponse",
                                        type: {
                                            name: "Sequence",
                                            element: {
                                                serializedName: "VirtualMachineImageResourceElementType",
                                                type: {
                                                    name: "Composite",
                                                    className: "VirtualMachineImageResource"
                                                }
                                            }
                                        }
                                    };
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     *
     * @param {string} location The name of a supported Azure region.
     *
     * @param {string} publisherName A valid image publisher.
     *
     * @param {string} offer A valid image publisher offer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineImages.prototype.listSkusWithHttpOperationResponse = function (location, publisherName, offer, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            location: location,
                            publisherName: publisherName,
                            offer: offer,
                            "this.client.apiVersion": this.client.apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus",
                                urlParameters: [
                                    {
                                        parameterPath: "location",
                                        mapper: {
                                            required: true,
                                            serializedName: "location",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "publisherName",
                                        mapper: {
                                            required: true,
                                            serializedName: "publisherName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "offer",
                                        mapper: {
                                            required: true,
                                            serializedName: "offer",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "this.client.apiVersion",
                                        mapper: {
                                            required: true,
                                            serializedName: "api-version",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: {
                                            serializedName: "parsedResponse",
                                            type: {
                                                name: "Sequence",
                                                element: {
                                                    serializedName: "VirtualMachineImageResourceElementType",
                                                    type: {
                                                        name: "Composite",
                                                        className: "VirtualMachineImageResource"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = {
                                        serializedName: "parsedResponse",
                                        type: {
                                            name: "Sequence",
                                            element: {
                                                serializedName: "VirtualMachineImageResourceElementType",
                                                type: {
                                                    name: "Composite",
                                                    className: "VirtualMachineImageResource"
                                                }
                                            }
                                        }
                                    };
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    VirtualMachineImages.prototype.get = function (location, publisherName, offer, skus, version, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(location, publisherName, offer, skus, version, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(location, publisherName, offer, skus, version, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualMachineImages.prototype.list = function (location, publisherName, offer, skus, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(location, publisherName, offer, skus, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listWithHttpOperationResponse(location, publisherName, offer, skus, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualMachineImages.prototype.listOffers = function (location, publisherName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listOffersWithHttpOperationResponse(location, publisherName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listOffersWithHttpOperationResponse(location, publisherName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualMachineImages.prototype.listPublishers = function (location, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listPublishersWithHttpOperationResponse(location, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listPublishersWithHttpOperationResponse(location, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualMachineImages.prototype.listSkus = function (location, publisherName, offer, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listSkusWithHttpOperationResponse(location, publisherName, offer, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listSkusWithHttpOperationResponse(location, publisherName, offer, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    return VirtualMachineImages;
}());
exports.VirtualMachineImages = VirtualMachineImages;
//# sourceMappingURL=virtualMachineImages.js.map