"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines values for StatusLevelTypes.
 * Possible values include: 'Info', 'Warning', 'Error'
 * @readonly
 * @enum {string}
 */
var StatusLevelTypes;
(function (StatusLevelTypes) {
    StatusLevelTypes["Info"] = "Info";
    StatusLevelTypes["Warning"] = "Warning";
    StatusLevelTypes["Error"] = "Error";
})(StatusLevelTypes = exports.StatusLevelTypes || (exports.StatusLevelTypes = {}));
/**
 * Defines values for OperatingSystemTypes.
 * Possible values include: 'Windows', 'Linux'
 * @readonly
 * @enum {string}
 */
var OperatingSystemTypes;
(function (OperatingSystemTypes) {
    OperatingSystemTypes["Windows"] = "Windows";
    OperatingSystemTypes["Linux"] = "Linux";
})(OperatingSystemTypes = exports.OperatingSystemTypes || (exports.OperatingSystemTypes = {}));
/**
 * Defines values for VirtualMachineSizeTypes.
 * Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
 * 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2', 'Standard_A2m_v2',
 * 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1', 'Standard_D2',
 * 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
 * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
 * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
 * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
 * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
 * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
 * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
 * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
 * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
 * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
 * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
 * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
 * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
 * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
 * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
 * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
 * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
 * 'Standard_NV12', 'Standard_NV24'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualMachineSizeTypes =
 * <VirtualMachineSizeTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualMachineSizeTypes;
(function (VirtualMachineSizeTypes) {
    VirtualMachineSizeTypes["BasicA0"] = "Basic_A0";
    VirtualMachineSizeTypes["BasicA1"] = "Basic_A1";
    VirtualMachineSizeTypes["BasicA2"] = "Basic_A2";
    VirtualMachineSizeTypes["BasicA3"] = "Basic_A3";
    VirtualMachineSizeTypes["BasicA4"] = "Basic_A4";
    VirtualMachineSizeTypes["StandardA0"] = "Standard_A0";
    VirtualMachineSizeTypes["StandardA1"] = "Standard_A1";
    VirtualMachineSizeTypes["StandardA2"] = "Standard_A2";
    VirtualMachineSizeTypes["StandardA3"] = "Standard_A3";
    VirtualMachineSizeTypes["StandardA4"] = "Standard_A4";
    VirtualMachineSizeTypes["StandardA5"] = "Standard_A5";
    VirtualMachineSizeTypes["StandardA6"] = "Standard_A6";
    VirtualMachineSizeTypes["StandardA7"] = "Standard_A7";
    VirtualMachineSizeTypes["StandardA8"] = "Standard_A8";
    VirtualMachineSizeTypes["StandardA9"] = "Standard_A9";
    VirtualMachineSizeTypes["StandardA10"] = "Standard_A10";
    VirtualMachineSizeTypes["StandardA11"] = "Standard_A11";
    VirtualMachineSizeTypes["StandardA1V2"] = "Standard_A1_v2";
    VirtualMachineSizeTypes["StandardA2V2"] = "Standard_A2_v2";
    VirtualMachineSizeTypes["StandardA4V2"] = "Standard_A4_v2";
    VirtualMachineSizeTypes["StandardA8V2"] = "Standard_A8_v2";
    VirtualMachineSizeTypes["StandardA2mV2"] = "Standard_A2m_v2";
    VirtualMachineSizeTypes["StandardA4mV2"] = "Standard_A4m_v2";
    VirtualMachineSizeTypes["StandardA8mV2"] = "Standard_A8m_v2";
    VirtualMachineSizeTypes["StandardD1"] = "Standard_D1";
    VirtualMachineSizeTypes["StandardD2"] = "Standard_D2";
    VirtualMachineSizeTypes["StandardD3"] = "Standard_D3";
    VirtualMachineSizeTypes["StandardD4"] = "Standard_D4";
    VirtualMachineSizeTypes["StandardD11"] = "Standard_D11";
    VirtualMachineSizeTypes["StandardD12"] = "Standard_D12";
    VirtualMachineSizeTypes["StandardD13"] = "Standard_D13";
    VirtualMachineSizeTypes["StandardD14"] = "Standard_D14";
    VirtualMachineSizeTypes["StandardD1V2"] = "Standard_D1_v2";
    VirtualMachineSizeTypes["StandardD2V2"] = "Standard_D2_v2";
    VirtualMachineSizeTypes["StandardD3V2"] = "Standard_D3_v2";
    VirtualMachineSizeTypes["StandardD4V2"] = "Standard_D4_v2";
    VirtualMachineSizeTypes["StandardD5V2"] = "Standard_D5_v2";
    VirtualMachineSizeTypes["StandardD11V2"] = "Standard_D11_v2";
    VirtualMachineSizeTypes["StandardD12V2"] = "Standard_D12_v2";
    VirtualMachineSizeTypes["StandardD13V2"] = "Standard_D13_v2";
    VirtualMachineSizeTypes["StandardD14V2"] = "Standard_D14_v2";
    VirtualMachineSizeTypes["StandardD15V2"] = "Standard_D15_v2";
    VirtualMachineSizeTypes["StandardDS1"] = "Standard_DS1";
    VirtualMachineSizeTypes["StandardDS2"] = "Standard_DS2";
    VirtualMachineSizeTypes["StandardDS3"] = "Standard_DS3";
    VirtualMachineSizeTypes["StandardDS4"] = "Standard_DS4";
    VirtualMachineSizeTypes["StandardDS11"] = "Standard_DS11";
    VirtualMachineSizeTypes["StandardDS12"] = "Standard_DS12";
    VirtualMachineSizeTypes["StandardDS13"] = "Standard_DS13";
    VirtualMachineSizeTypes["StandardDS14"] = "Standard_DS14";
    VirtualMachineSizeTypes["StandardDS1V2"] = "Standard_DS1_v2";
    VirtualMachineSizeTypes["StandardDS2V2"] = "Standard_DS2_v2";
    VirtualMachineSizeTypes["StandardDS3V2"] = "Standard_DS3_v2";
    VirtualMachineSizeTypes["StandardDS4V2"] = "Standard_DS4_v2";
    VirtualMachineSizeTypes["StandardDS5V2"] = "Standard_DS5_v2";
    VirtualMachineSizeTypes["StandardDS11V2"] = "Standard_DS11_v2";
    VirtualMachineSizeTypes["StandardDS12V2"] = "Standard_DS12_v2";
    VirtualMachineSizeTypes["StandardDS13V2"] = "Standard_DS13_v2";
    VirtualMachineSizeTypes["StandardDS14V2"] = "Standard_DS14_v2";
    VirtualMachineSizeTypes["StandardDS15V2"] = "Standard_DS15_v2";
    VirtualMachineSizeTypes["StandardF1"] = "Standard_F1";
    VirtualMachineSizeTypes["StandardF2"] = "Standard_F2";
    VirtualMachineSizeTypes["StandardF4"] = "Standard_F4";
    VirtualMachineSizeTypes["StandardF8"] = "Standard_F8";
    VirtualMachineSizeTypes["StandardF16"] = "Standard_F16";
    VirtualMachineSizeTypes["StandardF1s"] = "Standard_F1s";
    VirtualMachineSizeTypes["StandardF2s"] = "Standard_F2s";
    VirtualMachineSizeTypes["StandardF4s"] = "Standard_F4s";
    VirtualMachineSizeTypes["StandardF8s"] = "Standard_F8s";
    VirtualMachineSizeTypes["StandardF16s"] = "Standard_F16s";
    VirtualMachineSizeTypes["StandardG1"] = "Standard_G1";
    VirtualMachineSizeTypes["StandardG2"] = "Standard_G2";
    VirtualMachineSizeTypes["StandardG3"] = "Standard_G3";
    VirtualMachineSizeTypes["StandardG4"] = "Standard_G4";
    VirtualMachineSizeTypes["StandardG5"] = "Standard_G5";
    VirtualMachineSizeTypes["StandardGS1"] = "Standard_GS1";
    VirtualMachineSizeTypes["StandardGS2"] = "Standard_GS2";
    VirtualMachineSizeTypes["StandardGS3"] = "Standard_GS3";
    VirtualMachineSizeTypes["StandardGS4"] = "Standard_GS4";
    VirtualMachineSizeTypes["StandardGS5"] = "Standard_GS5";
    VirtualMachineSizeTypes["StandardH8"] = "Standard_H8";
    VirtualMachineSizeTypes["StandardH16"] = "Standard_H16";
    VirtualMachineSizeTypes["StandardH8m"] = "Standard_H8m";
    VirtualMachineSizeTypes["StandardH16m"] = "Standard_H16m";
    VirtualMachineSizeTypes["StandardH16r"] = "Standard_H16r";
    VirtualMachineSizeTypes["StandardH16mr"] = "Standard_H16mr";
    VirtualMachineSizeTypes["StandardL4s"] = "Standard_L4s";
    VirtualMachineSizeTypes["StandardL8s"] = "Standard_L8s";
    VirtualMachineSizeTypes["StandardL16s"] = "Standard_L16s";
    VirtualMachineSizeTypes["StandardL32s"] = "Standard_L32s";
    VirtualMachineSizeTypes["StandardNC6"] = "Standard_NC6";
    VirtualMachineSizeTypes["StandardNC12"] = "Standard_NC12";
    VirtualMachineSizeTypes["StandardNC24"] = "Standard_NC24";
    VirtualMachineSizeTypes["StandardNC24r"] = "Standard_NC24r";
    VirtualMachineSizeTypes["StandardNV6"] = "Standard_NV6";
    VirtualMachineSizeTypes["StandardNV12"] = "Standard_NV12";
    VirtualMachineSizeTypes["StandardNV24"] = "Standard_NV24";
})(VirtualMachineSizeTypes = exports.VirtualMachineSizeTypes || (exports.VirtualMachineSizeTypes = {}));
/**
 * Defines values for CachingTypes.
 * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 * @readonly
 * @enum {string}
 */
var CachingTypes;
(function (CachingTypes) {
    CachingTypes["None"] = "None";
    CachingTypes["ReadOnly"] = "ReadOnly";
    CachingTypes["ReadWrite"] = "ReadWrite";
})(CachingTypes = exports.CachingTypes || (exports.CachingTypes = {}));
/**
 * Defines values for DiskCreateOptionTypes.
 * Possible values include: 'FromImage', 'Empty', 'Attach'
 * @readonly
 * @enum {string}
 */
var DiskCreateOptionTypes;
(function (DiskCreateOptionTypes) {
    DiskCreateOptionTypes["FromImage"] = "FromImage";
    DiskCreateOptionTypes["Empty"] = "Empty";
    DiskCreateOptionTypes["Attach"] = "Attach";
})(DiskCreateOptionTypes = exports.DiskCreateOptionTypes || (exports.DiskCreateOptionTypes = {}));
/**
 * Defines values for StorageAccountTypes.
 * Possible values include: 'Standard_LRS', 'Premium_LRS'
 * @readonly
 * @enum {string}
 */
var StorageAccountTypes;
(function (StorageAccountTypes) {
    StorageAccountTypes["StandardLRS"] = "Standard_LRS";
    StorageAccountTypes["PremiumLRS"] = "Premium_LRS";
})(StorageAccountTypes = exports.StorageAccountTypes || (exports.StorageAccountTypes = {}));
/**
 * Defines values for PassNames.
 * Possible values include: 'OobeSystem'
 * @readonly
 * @enum {string}
 */
var PassNames;
(function (PassNames) {
    PassNames["OobeSystem"] = "OobeSystem";
})(PassNames = exports.PassNames || (exports.PassNames = {}));
/**
 * Defines values for ComponentNames.
 * Possible values include: 'Microsoft-Windows-Shell-Setup'
 * @readonly
 * @enum {string}
 */
var ComponentNames;
(function (ComponentNames) {
    ComponentNames["MicrosoftWindowsShellSetup"] = "Microsoft-Windows-Shell-Setup";
})(ComponentNames = exports.ComponentNames || (exports.ComponentNames = {}));
/**
 * Defines values for SettingNames.
 * Possible values include: 'AutoLogon', 'FirstLogonCommands'
 * @readonly
 * @enum {string}
 */
var SettingNames;
(function (SettingNames) {
    SettingNames["AutoLogon"] = "AutoLogon";
    SettingNames["FirstLogonCommands"] = "FirstLogonCommands";
})(SettingNames = exports.SettingNames || (exports.SettingNames = {}));
/**
 * Defines values for ProtocolTypes.
 * Possible values include: 'Http', 'Https'
 * @readonly
 * @enum {string}
 */
var ProtocolTypes;
(function (ProtocolTypes) {
    ProtocolTypes["Http"] = "Http";
    ProtocolTypes["Https"] = "Https";
})(ProtocolTypes = exports.ProtocolTypes || (exports.ProtocolTypes = {}));
/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned'
 * @readonly
 * @enum {string}
 */
var ResourceIdentityType;
(function (ResourceIdentityType) {
    ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
})(ResourceIdentityType = exports.ResourceIdentityType || (exports.ResourceIdentityType = {}));
/**
 * Defines values for MaintenanceOperationResultCodeTypes.
 * Possible values include: 'None', 'RetryLater', 'MaintenanceAborted',
 * 'MaintenanceCompleted'
 * @readonly
 * @enum {string}
 */
var MaintenanceOperationResultCodeTypes;
(function (MaintenanceOperationResultCodeTypes) {
    MaintenanceOperationResultCodeTypes["None"] = "None";
    MaintenanceOperationResultCodeTypes["RetryLater"] = "RetryLater";
    MaintenanceOperationResultCodeTypes["MaintenanceAborted"] = "MaintenanceAborted";
    MaintenanceOperationResultCodeTypes["MaintenanceCompleted"] = "MaintenanceCompleted";
})(MaintenanceOperationResultCodeTypes = exports.MaintenanceOperationResultCodeTypes || (exports.MaintenanceOperationResultCodeTypes = {}));
/**
 * Defines values for UpgradeMode.
 * Possible values include: 'Automatic', 'Manual', 'Rolling'
 * @readonly
 * @enum {string}
 */
var UpgradeMode;
(function (UpgradeMode) {
    UpgradeMode["Automatic"] = "Automatic";
    UpgradeMode["Manual"] = "Manual";
    UpgradeMode["Rolling"] = "Rolling";
})(UpgradeMode = exports.UpgradeMode || (exports.UpgradeMode = {}));
/**
 * Defines values for OperatingSystemStateTypes.
 * Possible values include: 'Generalized', 'Specialized'
 * @readonly
 * @enum {string}
 */
var OperatingSystemStateTypes;
(function (OperatingSystemStateTypes) {
    OperatingSystemStateTypes["Generalized"] = "Generalized";
    OperatingSystemStateTypes["Specialized"] = "Specialized";
})(OperatingSystemStateTypes = exports.OperatingSystemStateTypes || (exports.OperatingSystemStateTypes = {}));
/**
 * Defines values for ResourceSkuCapacityScaleType.
 * Possible values include: 'Automatic', 'Manual', 'None'
 * @readonly
 * @enum {string}
 */
var ResourceSkuCapacityScaleType;
(function (ResourceSkuCapacityScaleType) {
    ResourceSkuCapacityScaleType["Automatic"] = "Automatic";
    ResourceSkuCapacityScaleType["Manual"] = "Manual";
    ResourceSkuCapacityScaleType["None"] = "None";
})(ResourceSkuCapacityScaleType = exports.ResourceSkuCapacityScaleType || (exports.ResourceSkuCapacityScaleType = {}));
/**
 * Defines values for ResourceSkuRestrictionsType.
 * Possible values include: 'Location'
 * @readonly
 * @enum {string}
 */
var ResourceSkuRestrictionsType;
(function (ResourceSkuRestrictionsType) {
    ResourceSkuRestrictionsType["Location"] = "Location";
})(ResourceSkuRestrictionsType = exports.ResourceSkuRestrictionsType || (exports.ResourceSkuRestrictionsType = {}));
/**
 * Defines values for ResourceSkuRestrictionsReasonCode.
 * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
 * @readonly
 * @enum {string}
 */
var ResourceSkuRestrictionsReasonCode;
(function (ResourceSkuRestrictionsReasonCode) {
    ResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
    ResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
})(ResourceSkuRestrictionsReasonCode = exports.ResourceSkuRestrictionsReasonCode || (exports.ResourceSkuRestrictionsReasonCode = {}));
/**
 * Defines values for IPVersion.
 * Possible values include: 'IPv4', 'IPv6'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IPVersion = <IPVersion>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IPVersion;
(function (IPVersion) {
    IPVersion["IPv4"] = "IPv4";
    IPVersion["IPv6"] = "IPv6";
})(IPVersion = exports.IPVersion || (exports.IPVersion = {}));
/**
 * Defines values for VirtualMachineScaleSetSkuScaleType.
 * Possible values include: 'Automatic', 'None'
 * @readonly
 * @enum {string}
 */
var VirtualMachineScaleSetSkuScaleType;
(function (VirtualMachineScaleSetSkuScaleType) {
    VirtualMachineScaleSetSkuScaleType["Automatic"] = "Automatic";
    VirtualMachineScaleSetSkuScaleType["None"] = "None";
})(VirtualMachineScaleSetSkuScaleType = exports.VirtualMachineScaleSetSkuScaleType || (exports.VirtualMachineScaleSetSkuScaleType = {}));
/**
 * Defines values for RollingUpgradeStatusCode.
 * Possible values include: 'RollingForward', 'Cancelled', 'Completed',
 * 'Faulted'
 * @readonly
 * @enum {string}
 */
var RollingUpgradeStatusCode;
(function (RollingUpgradeStatusCode) {
    RollingUpgradeStatusCode["RollingForward"] = "RollingForward";
    RollingUpgradeStatusCode["Cancelled"] = "Cancelled";
    RollingUpgradeStatusCode["Completed"] = "Completed";
    RollingUpgradeStatusCode["Faulted"] = "Faulted";
})(RollingUpgradeStatusCode = exports.RollingUpgradeStatusCode || (exports.RollingUpgradeStatusCode = {}));
/**
 * Defines values for RollingUpgradeActionType.
 * Possible values include: 'Start', 'Cancel'
 * @readonly
 * @enum {string}
 */
var RollingUpgradeActionType;
(function (RollingUpgradeActionType) {
    RollingUpgradeActionType["Start"] = "Start";
    RollingUpgradeActionType["Cancel"] = "Cancel";
})(RollingUpgradeActionType = exports.RollingUpgradeActionType || (exports.RollingUpgradeActionType = {}));
/**
 * Defines values for DiskCreateOption.
 * Possible values include: 'Empty', 'Attach', 'FromImage', 'Import', 'Copy'
 * @readonly
 * @enum {string}
 */
var DiskCreateOption;
(function (DiskCreateOption) {
    DiskCreateOption["Empty"] = "Empty";
    DiskCreateOption["Attach"] = "Attach";
    DiskCreateOption["FromImage"] = "FromImage";
    DiskCreateOption["Import"] = "Import";
    DiskCreateOption["Copy"] = "Copy";
})(DiskCreateOption = exports.DiskCreateOption || (exports.DiskCreateOption = {}));
/**
 * Defines values for AccessLevel.
 * Possible values include: 'None', 'Read'
 * @readonly
 * @enum {string}
 */
var AccessLevel;
(function (AccessLevel) {
    AccessLevel["None"] = "None";
    AccessLevel["Read"] = "Read";
})(AccessLevel = exports.AccessLevel || (exports.AccessLevel = {}));
/**
 * Defines values for InstanceViewTypes.
 * Possible values include: 'instanceView'
 * @readonly
 * @enum {string}
 */
var InstanceViewTypes;
(function (InstanceViewTypes) {
    InstanceViewTypes["InstanceView"] = "instanceView";
})(InstanceViewTypes = exports.InstanceViewTypes || (exports.InstanceViewTypes = {}));
//# sourceMappingURL=index.js.map