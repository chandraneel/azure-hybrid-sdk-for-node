"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = require("ms-rest-js");
var Mappers = require("../models/virtualNetworksMappers");
var WebResource = msRest.WebResource;
/** Class representing a VirtualNetworks. */
var VirtualNetworks = /** @class */ (function () {
    /**
     * Create a VirtualNetworks.
     * @param {NetworkManagementClientContext} client Reference to the service client.
     */
    function VirtualNetworks(client) {
        this.serializer = new msRest.Serializer(Mappers);
        this.client = client;
    }
    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified virtual network by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetworksGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.getWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var expand, apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            resourceGroupName: resourceGroupName,
                            virtualNetworkName: virtualNetworkName,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            expand: expand,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "virtualNetworkName",
                                        mapper: {
                                            required: true,
                                            serializedName: "virtualNetworkName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "expand",
                                        mapper: {
                                            serializedName: "$expand",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetwork
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetwork;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetwork} parameters Parameters supplied to the create or update virtual network
     * operation
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        parsedResponse = operationRes.parsedBody;
                        try {
                            if (parsedResponse != undefined) {
                                resultMapper = Mappers.VirtualNetwork;
                                operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                            }
                        }
                        catch (error) {
                            deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = msRest.stripRequest(httpRequest);
                            deserializationError.response = msRest.stripResponse(operationRes);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Updates a virtual network tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {TagsObject} parameters Parameters supplied to update virtual network tags.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.updateTagsWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_6, operationRes, httpRequest, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        parsedResponse = operationRes.parsedBody;
                        try {
                            if (parsedResponse != undefined) {
                                resultMapper = Mappers.VirtualNetwork;
                                operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                            }
                        }
                        catch (error) {
                            deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = msRest.stripRequest(httpRequest);
                            deserializationError.response = msRest.stripResponse(operationRes);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks",
                                urlParameters: [
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetworkListResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetworkListResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            resourceGroupName: resourceGroupName,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetworkListResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetworkListResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Checks whether a private IP address is available for use.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetworksCheckIPAddressAvailabilityOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.checkIPAddressAvailabilityWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var ipAddress, apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipAddress = (options && options.ipAddress !== undefined) ? options.ipAddress : undefined;
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            ipAddress: ipAddress,
                            resourceGroupName: resourceGroupName,
                            virtualNetworkName: virtualNetworkName,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/CheckIPAddressAvailability",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "virtualNetworkName",
                                        mapper: {
                                            required: true,
                                            serializedName: "virtualNetworkName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "ipAddress",
                                        mapper: {
                                            serializedName: "ipAddress",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.IPAddressAvailabilityResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.IPAddressAvailabilityResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists usage stats.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.listUsageWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            resourceGroupName: resourceGroupName,
                            virtualNetworkName: virtualNetworkName,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/usages",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "virtualNetworkName",
                                        mapper: {
                                            required: true,
                                            serializedName: "virtualNetworkName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetworkListUsageResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetworkListUsageResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            resourceGroupName: resourceGroupName,
                            virtualNetworkName: virtualNetworkName,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "DELETE",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "virtualNetworkName",
                                        mapper: {
                                            required: true,
                                            serializedName: "virtualNetworkName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    202: {},
                                    204: {},
                                    200: {},
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetwork} parameters Parameters supplied to the create or update virtual network
     * operation
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            resourceGroupName: resourceGroupName,
                            virtualNetworkName: virtualNetworkName,
                            parameters: parameters,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "PUT",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "virtualNetworkName",
                                        mapper: {
                                            required: true,
                                            serializedName: "virtualNetworkName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                requestBody: {
                                    parameterPath: "parameters",
                                    mapper: __assign({}, Mappers.VirtualNetwork, { required: true })
                                },
                                contentType: "application/json; charset=utf-8",
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetwork
                                    },
                                    201: {
                                        bodyMapper: Mappers.VirtualNetwork
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetwork;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        if (statusCode === 201) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetwork;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = msRest.stripRequest(httpRequest);
                                deserializationError1.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Updates a virtual network tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {TagsObject} parameters Parameters supplied to update virtual network tags.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.beginUpdateTagsWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            resourceGroupName: resourceGroupName,
                            virtualNetworkName: virtualNetworkName,
                            parameters: parameters,
                            apiVersion: apiVersion,
                            "this.client.subscriptionId": this.client.subscriptionId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "PATCH",
                                baseUrl: this.client.baseUri,
                                path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
                                urlParameters: [
                                    {
                                        parameterPath: "resourceGroupName",
                                        mapper: {
                                            required: true,
                                            serializedName: "resourceGroupName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "virtualNetworkName",
                                        mapper: {
                                            required: true,
                                            serializedName: "virtualNetworkName",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.client.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                requestBody: {
                                    parameterPath: "parameters",
                                    mapper: __assign({}, Mappers.TagsObject, { required: true })
                                },
                                contentType: "application/json; charset=utf-8",
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetwork
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetwork;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            nextPageLink: nextPageLink,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: "https://management.azure.com",
                                path: "{nextLink}",
                                urlParameters: [
                                    {
                                        parameterPath: "nextPageLink",
                                        skipEncoding: true,
                                        mapper: {
                                            required: true,
                                            serializedName: "nextLink",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetworkListResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetworkListResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            nextPageLink: nextPageLink,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: "https://management.azure.com",
                                path: "{nextLink}",
                                urlParameters: [
                                    {
                                        parameterPath: "nextPageLink",
                                        skipEncoding: true,
                                        mapper: {
                                            required: true,
                                            serializedName: "nextLink",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetworkListResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetworkListResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists usage stats.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualNetworks.prototype.listUsageNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            nextPageLink: nextPageLink,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: "https://management.azure.com",
                                path: "{nextLink}",
                                urlParameters: [
                                    {
                                        parameterPath: "nextPageLink",
                                        skipEncoding: true,
                                        mapper: {
                                            required: true,
                                            serializedName: "nextLink",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.VirtualNetworkListUsageResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.VirtualNetworkListUsageResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_17 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_17)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    VirtualNetworks.prototype.deleteMethod = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.get = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.createOrUpdate = function (resourceGroupName, virtualNetworkName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.updateTags = function (resourceGroupName, virtualNetworkName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.updateTagsWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.updateTagsWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.checkIPAddressAvailability = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.checkIPAddressAvailabilityWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.checkIPAddressAvailabilityWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.listUsage = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listUsageWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listUsageWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.beginDeleteMethod = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.beginCreateOrUpdate = function (resourceGroupName, virtualNetworkName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.beginUpdateTags = function (resourceGroupName, virtualNetworkName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    VirtualNetworks.prototype.listUsageNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listUsageNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listUsageNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    return VirtualNetworks;
}());
exports.VirtualNetworks = VirtualNetworks;
//# sourceMappingURL=virtualNetworks.js.map