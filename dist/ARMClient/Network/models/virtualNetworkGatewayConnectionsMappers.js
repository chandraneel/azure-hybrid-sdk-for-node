"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var mappers_1 = require("../models/mappers");
exports.VirtualNetworkGatewayConnection = mappers_1.VirtualNetworkGatewayConnection;
exports.Resource = mappers_1.Resource;
exports.BaseResource = mappers_1.BaseResource;
exports.VirtualNetworkGateway = mappers_1.VirtualNetworkGateway;
exports.VirtualNetworkGatewayIPConfiguration = mappers_1.VirtualNetworkGatewayIPConfiguration;
exports.SubResource = mappers_1.SubResource;
exports.VirtualNetworkGatewaySku = mappers_1.VirtualNetworkGatewaySku;
exports.VpnClientConfiguration = mappers_1.VpnClientConfiguration;
exports.AddressSpace = mappers_1.AddressSpace;
exports.VpnClientRootCertificate = mappers_1.VpnClientRootCertificate;
exports.VpnClientRevokedCertificate = mappers_1.VpnClientRevokedCertificate;
exports.BgpSettings = mappers_1.BgpSettings;
exports.LocalNetworkGateway = mappers_1.LocalNetworkGateway;
exports.TunnelConnectionHealth = mappers_1.TunnelConnectionHealth;
exports.IpsecPolicy = mappers_1.IpsecPolicy;
exports.CloudError = mappers_1.CloudError;
exports.TagsObject = mappers_1.TagsObject;
exports.VirtualNetworkGatewayConnectionListEntity = mappers_1.VirtualNetworkGatewayConnectionListEntity;
exports.VirtualNetworkConnectionGatewayReference = mappers_1.VirtualNetworkConnectionGatewayReference;
exports.ConnectionSharedKey = mappers_1.ConnectionSharedKey;
exports.VirtualNetworkGatewayConnectionListResult = mappers_1.VirtualNetworkGatewayConnectionListResult;
exports.ConnectionResetSharedKey = mappers_1.ConnectionResetSharedKey;
exports.ApplicationSecurityGroup = mappers_1.ApplicationSecurityGroup;
exports.SecurityRule = mappers_1.SecurityRule;
exports.ApplicationGatewayBackendAddressPool = mappers_1.ApplicationGatewayBackendAddressPool;
exports.NetworkInterfaceIPConfiguration = mappers_1.NetworkInterfaceIPConfiguration;
exports.BackendAddressPool = mappers_1.BackendAddressPool;
exports.InboundNatRule = mappers_1.InboundNatRule;
exports.Subnet = mappers_1.Subnet;
exports.NetworkSecurityGroup = mappers_1.NetworkSecurityGroup;
exports.NetworkInterface = mappers_1.NetworkInterface;
exports.NetworkInterfaceDnsSettings = mappers_1.NetworkInterfaceDnsSettings;
exports.RouteTable = mappers_1.RouteTable;
exports.Route = mappers_1.Route;
exports.ServiceEndpointPropertiesFormat = mappers_1.ServiceEndpointPropertiesFormat;
exports.IPConfiguration = mappers_1.IPConfiguration;
exports.PublicIPAddress = mappers_1.PublicIPAddress;
exports.PublicIPAddressSku = mappers_1.PublicIPAddressSku;
exports.PublicIPAddressDnsSettings = mappers_1.PublicIPAddressDnsSettings;
exports.ResourceNavigationLink = mappers_1.ResourceNavigationLink;
exports.ApplicationGatewayBackendAddress = mappers_1.ApplicationGatewayBackendAddress;
exports.FrontendIPConfiguration = mappers_1.FrontendIPConfiguration;
exports.LoadBalancingRule = mappers_1.LoadBalancingRule;
exports.Probe = mappers_1.Probe;
exports.InboundNatPool = mappers_1.InboundNatPool;
exports.OutboundNatRule = mappers_1.OutboundNatRule;
exports.LoadBalancer = mappers_1.LoadBalancer;
exports.LoadBalancerSku = mappers_1.LoadBalancerSku;
exports.NetworkWatcher = mappers_1.NetworkWatcher;
exports.ConnectionMonitorResult = mappers_1.ConnectionMonitorResult;
exports.ConnectionMonitorSource = mappers_1.ConnectionMonitorSource;
exports.ConnectionMonitorDestination = mappers_1.ConnectionMonitorDestination;
exports.RouteFilterRule = mappers_1.RouteFilterRule;
exports.PatchRouteFilterRule = mappers_1.PatchRouteFilterRule;
exports.RouteFilter = mappers_1.RouteFilter;
exports.ExpressRouteCircuitPeering = mappers_1.ExpressRouteCircuitPeering;
exports.ExpressRouteCircuitPeeringConfig = mappers_1.ExpressRouteCircuitPeeringConfig;
exports.ExpressRouteCircuitStats = mappers_1.ExpressRouteCircuitStats;
exports.Ipv6ExpressRouteCircuitPeeringConfig = mappers_1.Ipv6ExpressRouteCircuitPeeringConfig;
exports.PatchRouteFilter = mappers_1.PatchRouteFilter;
exports.VirtualNetworkPeering = mappers_1.VirtualNetworkPeering;
exports.VirtualNetwork = mappers_1.VirtualNetwork;
exports.DhcpOptions = mappers_1.DhcpOptions;
//# sourceMappingURL=virtualNetworkGatewayConnectionsMappers.js.map