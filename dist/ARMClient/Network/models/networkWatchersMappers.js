"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var mappers_1 = require("../models/mappers");
exports.NetworkWatcher = mappers_1.NetworkWatcher;
exports.Resource = mappers_1.Resource;
exports.BaseResource = mappers_1.BaseResource;
exports.CloudError = mappers_1.CloudError;
exports.TagsObject = mappers_1.TagsObject;
exports.NetworkWatcherListResult = mappers_1.NetworkWatcherListResult;
exports.TopologyParameters = mappers_1.TopologyParameters;
exports.SubResource = mappers_1.SubResource;
exports.Topology = mappers_1.Topology;
exports.TopologyResource = mappers_1.TopologyResource;
exports.TopologyAssociation = mappers_1.TopologyAssociation;
exports.VerificationIPFlowParameters = mappers_1.VerificationIPFlowParameters;
exports.VerificationIPFlowResult = mappers_1.VerificationIPFlowResult;
exports.NextHopParameters = mappers_1.NextHopParameters;
exports.NextHopResult = mappers_1.NextHopResult;
exports.SecurityGroupViewParameters = mappers_1.SecurityGroupViewParameters;
exports.SecurityGroupViewResult = mappers_1.SecurityGroupViewResult;
exports.SecurityGroupNetworkInterface = mappers_1.SecurityGroupNetworkInterface;
exports.SecurityRuleAssociations = mappers_1.SecurityRuleAssociations;
exports.NetworkInterfaceAssociation = mappers_1.NetworkInterfaceAssociation;
exports.SecurityRule = mappers_1.SecurityRule;
exports.ApplicationSecurityGroup = mappers_1.ApplicationSecurityGroup;
exports.SubnetAssociation = mappers_1.SubnetAssociation;
exports.EffectiveNetworkSecurityRule = mappers_1.EffectiveNetworkSecurityRule;
exports.TroubleshootingParameters = mappers_1.TroubleshootingParameters;
exports.TroubleshootingResult = mappers_1.TroubleshootingResult;
exports.TroubleshootingDetails = mappers_1.TroubleshootingDetails;
exports.TroubleshootingRecommendedActions = mappers_1.TroubleshootingRecommendedActions;
exports.QueryTroubleshootingParameters = mappers_1.QueryTroubleshootingParameters;
exports.FlowLogInformation = mappers_1.FlowLogInformation;
exports.RetentionPolicyParameters = mappers_1.RetentionPolicyParameters;
exports.FlowLogStatusParameters = mappers_1.FlowLogStatusParameters;
exports.ConnectivityParameters = mappers_1.ConnectivityParameters;
exports.ConnectivitySource = mappers_1.ConnectivitySource;
exports.ConnectivityDestination = mappers_1.ConnectivityDestination;
exports.ConnectivityInformation = mappers_1.ConnectivityInformation;
exports.ConnectivityHop = mappers_1.ConnectivityHop;
exports.ConnectivityIssue = mappers_1.ConnectivityIssue;
exports.AzureReachabilityReportParameters = mappers_1.AzureReachabilityReportParameters;
exports.AzureReachabilityReportLocation = mappers_1.AzureReachabilityReportLocation;
exports.AzureReachabilityReport = mappers_1.AzureReachabilityReport;
exports.AzureReachabilityReportItem = mappers_1.AzureReachabilityReportItem;
exports.AzureReachabilityReportLatencyInfo = mappers_1.AzureReachabilityReportLatencyInfo;
exports.AvailableProvidersListParameters = mappers_1.AvailableProvidersListParameters;
exports.AvailableProvidersList = mappers_1.AvailableProvidersList;
exports.AvailableProvidersListCountry = mappers_1.AvailableProvidersListCountry;
exports.AvailableProvidersListState = mappers_1.AvailableProvidersListState;
exports.AvailableProvidersListCity = mappers_1.AvailableProvidersListCity;
exports.ApplicationGatewayBackendAddressPool = mappers_1.ApplicationGatewayBackendAddressPool;
exports.NetworkInterfaceIPConfiguration = mappers_1.NetworkInterfaceIPConfiguration;
exports.BackendAddressPool = mappers_1.BackendAddressPool;
exports.InboundNatRule = mappers_1.InboundNatRule;
exports.Subnet = mappers_1.Subnet;
exports.NetworkSecurityGroup = mappers_1.NetworkSecurityGroup;
exports.NetworkInterface = mappers_1.NetworkInterface;
exports.NetworkInterfaceDnsSettings = mappers_1.NetworkInterfaceDnsSettings;
exports.RouteTable = mappers_1.RouteTable;
exports.Route = mappers_1.Route;
exports.ServiceEndpointPropertiesFormat = mappers_1.ServiceEndpointPropertiesFormat;
exports.IPConfiguration = mappers_1.IPConfiguration;
exports.PublicIPAddress = mappers_1.PublicIPAddress;
exports.PublicIPAddressSku = mappers_1.PublicIPAddressSku;
exports.PublicIPAddressDnsSettings = mappers_1.PublicIPAddressDnsSettings;
exports.ResourceNavigationLink = mappers_1.ResourceNavigationLink;
exports.ApplicationGatewayBackendAddress = mappers_1.ApplicationGatewayBackendAddress;
exports.FrontendIPConfiguration = mappers_1.FrontendIPConfiguration;
exports.LoadBalancingRule = mappers_1.LoadBalancingRule;
exports.Probe = mappers_1.Probe;
exports.InboundNatPool = mappers_1.InboundNatPool;
exports.OutboundNatRule = mappers_1.OutboundNatRule;
exports.LoadBalancer = mappers_1.LoadBalancer;
exports.LoadBalancerSku = mappers_1.LoadBalancerSku;
exports.ConnectionMonitorResult = mappers_1.ConnectionMonitorResult;
exports.ConnectionMonitorSource = mappers_1.ConnectionMonitorSource;
exports.ConnectionMonitorDestination = mappers_1.ConnectionMonitorDestination;
exports.RouteFilterRule = mappers_1.RouteFilterRule;
exports.PatchRouteFilterRule = mappers_1.PatchRouteFilterRule;
exports.RouteFilter = mappers_1.RouteFilter;
exports.ExpressRouteCircuitPeering = mappers_1.ExpressRouteCircuitPeering;
exports.ExpressRouteCircuitPeeringConfig = mappers_1.ExpressRouteCircuitPeeringConfig;
exports.ExpressRouteCircuitStats = mappers_1.ExpressRouteCircuitStats;
exports.Ipv6ExpressRouteCircuitPeeringConfig = mappers_1.Ipv6ExpressRouteCircuitPeeringConfig;
exports.PatchRouteFilter = mappers_1.PatchRouteFilter;
exports.VirtualNetworkPeering = mappers_1.VirtualNetworkPeering;
exports.AddressSpace = mappers_1.AddressSpace;
exports.VirtualNetwork = mappers_1.VirtualNetwork;
exports.DhcpOptions = mappers_1.DhcpOptions;
exports.VirtualNetworkGatewayIPConfiguration = mappers_1.VirtualNetworkGatewayIPConfiguration;
exports.VpnClientRootCertificate = mappers_1.VpnClientRootCertificate;
exports.VpnClientRevokedCertificate = mappers_1.VpnClientRevokedCertificate;
exports.VirtualNetworkGateway = mappers_1.VirtualNetworkGateway;
exports.VirtualNetworkGatewaySku = mappers_1.VirtualNetworkGatewaySku;
exports.VpnClientConfiguration = mappers_1.VpnClientConfiguration;
exports.BgpSettings = mappers_1.BgpSettings;
exports.LocalNetworkGateway = mappers_1.LocalNetworkGateway;
exports.VirtualNetworkGatewayConnection = mappers_1.VirtualNetworkGatewayConnection;
exports.TunnelConnectionHealth = mappers_1.TunnelConnectionHealth;
exports.IpsecPolicy = mappers_1.IpsecPolicy;
exports.VirtualNetworkGatewayConnectionListEntity = mappers_1.VirtualNetworkGatewayConnectionListEntity;
exports.VirtualNetworkConnectionGatewayReference = mappers_1.VirtualNetworkConnectionGatewayReference;
//# sourceMappingURL=networkWatchersMappers.js.map