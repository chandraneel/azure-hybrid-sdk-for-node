"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Models = require("./models");
exports.NetworkManagementModels = Models;
var Mappers = require("./models/mappers");
exports.NetworkManagementMappers = Mappers;
var msRest = require("ms-rest-js");
var networkManagementClientContext_1 = require("./networkManagementClientContext");
var operations = require("./operations");
var WebResource = msRest.WebResource;
var NetworkManagementClient = /** @class */ (function (_super) {
    __extends(NetworkManagementClient, _super);
    /**
     * @class
     * Initializes a new instance of the NetworkManagementClient class.
     * @constructor
     *
     * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.
     *
     * @param {string} subscriptionId - The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
     * {@link https://github.github.io/fetch/#Request Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     * @param {string} [options.acceptLanguage] - The preferred language for the response.
     *
     * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     */
    function NetworkManagementClient(credentials, subscriptionId, baseUri, options) {
        var _this = _super.call(this, credentials, subscriptionId, baseUri, options) || this;
        _this.serializer = new msRest.Serializer(Mappers);
        _this.loadBalancers = new operations.LoadBalancers(_this);
        _this.loadBalancerBackendAddressPools = new operations.LoadBalancerBackendAddressPools(_this);
        _this.loadBalancerFrontendIPConfigurations = new operations.LoadBalancerFrontendIPConfigurations(_this);
        _this.inboundNatRules = new operations.InboundNatRules(_this);
        _this.loadBalancerLoadBalancingRules = new operations.LoadBalancerLoadBalancingRules(_this);
        _this.loadBalancerNetworkInterfaces = new operations.LoadBalancerNetworkInterfaces(_this);
        _this.loadBalancerProbes = new operations.LoadBalancerProbes(_this);
        _this.networkInterfaces = new operations.NetworkInterfaces(_this);
        _this.networkInterfaceIPConfigurations = new operations.NetworkInterfaceIPConfigurations(_this);
        _this.networkInterfaceLoadBalancers = new operations.NetworkInterfaceLoadBalancers(_this);
        _this.networkSecurityGroups = new operations.NetworkSecurityGroups(_this);
        _this.securityRules = new operations.SecurityRules(_this);
        _this.defaultSecurityRules = new operations.DefaultSecurityRules(_this);
        _this.networkWatchers = new operations.NetworkWatchers(_this);
        _this.packetCaptures = new operations.PacketCaptures(_this);
        _this.connectionMonitors = new operations.ConnectionMonitors(_this);
        _this.operations = new operations.Operations(_this);
        _this.publicIPAddresses = new operations.PublicIPAddresses(_this);
        _this.routeFilters = new operations.RouteFilters(_this);
        _this.routeFilterRules = new operations.RouteFilterRules(_this);
        _this.routeTables = new operations.RouteTables(_this);
        _this.routes = new operations.Routes(_this);
        _this.usages = new operations.Usages(_this);
        _this.virtualNetworks = new operations.VirtualNetworks(_this);
        _this.subnets = new operations.Subnets(_this);
        _this.virtualNetworkPeerings = new operations.VirtualNetworkPeerings(_this);
        _this.virtualNetworkGateways = new operations.VirtualNetworkGateways(_this);
        _this.virtualNetworkGatewayConnections = new operations.VirtualNetworkGatewayConnections(_this);
        _this.localNetworkGateways = new operations.LocalNetworkGateways(_this);
        return _this;
    }
    // methods on the client.
    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
     *
     * @param {string} location The location of the domain name.
     *
     * @param {string} domainNameLabel The domain name to be verified. It must conform to the following
     * regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    NetworkManagementClient.prototype.checkDnsNameAvailabilityWithHttpOperationResponse = function (location, domainNameLabel, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiVersion = '2017-10-01';
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            location: location,
                            domainNameLabel: domainNameLabel,
                            apiVersion: apiVersion,
                            "this.subscriptionId": this.subscriptionId,
                            "this.acceptLanguage": this.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.baseUri,
                                path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability",
                                urlParameters: [
                                    {
                                        parameterPath: "location",
                                        mapper: {
                                            required: true,
                                            serializedName: "location",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "this.subscriptionId",
                                        mapper: {
                                            required: true,
                                            serializedName: "subscriptionId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "domainNameLabel",
                                        mapper: {
                                            required: true,
                                            serializedName: "domainNameLabel",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "apiVersion",
                                        mapper: {
                                            required: true,
                                            isConstant: true,
                                            serializedName: "api-version",
                                            defaultValue: '2017-10-01',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.DnsNameAvailabilityResult
                                    },
                                    default: {
                                        bodyMapper: Mappers.CloudError
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.DnsNameAvailabilityResult;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkManagementClient.prototype.checkDnsNameAvailability = function (location, domainNameLabel, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.checkDnsNameAvailabilityWithHttpOperationResponse(location, domainNameLabel, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.checkDnsNameAvailabilityWithHttpOperationResponse(location, domainNameLabel, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    return NetworkManagementClient;
}(networkManagementClientContext_1.NetworkManagementClientContext));
exports.NetworkManagementClient = NetworkManagementClient;
//# sourceMappingURL=networkManagementClient.js.map